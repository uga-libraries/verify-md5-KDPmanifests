import hashlib
import os
import sys
import csv
from datetime import datetime

# This script parses checksum manifest TXT files generated by Karen's Directory Printer. 
# It validates file fixity by generating a new MD5 checksum and comparing it to the MD5 in the manifest.
# It also skips over common preservation documentation like Duke Data Accessioner logs and media inventories.

# Script usage: python /path/to/script /path/to/accession/directory
# The manifest file needs to be somewhere in the specified accession directory.

# Select the directory containing the files to be verified
dir_to_verify = sys.argv[1]

# Create a dictionary to pair file paths with their original checksums from the manifest
hash_dict = {}

date = datetime.now().strftime("%Y%m%d")

# An empty list to hold the names of invalid files
invalid = []

# An empty list to hold the names of all files in the current directory
files_in_dir = []

# A list of substrings that indicate a file is skippable preservation documentation
to_skip = ["data-accessioner","dataaccessioner","_er.xml","_inventory.xlsx","media-inventory","normalized-filenames","preservation.txt","preservation-log","preservation_log","preservationlog", "removalsheet", "validation_log"]

count = 0
print(f'\nAll validation results will be saved to the log file.')

with open(f'{dir_to_verify}\\validation_log_{date}.csv', "w", encoding="utf-8", newline='') as log_file: # Create a new CSV validation log in the current accession folder, UTF-8 encoding handles any special characters
    writer = csv.writer(log_file)
    header = ['Timestamp', 'File', 'ChecksumValidated', 'MD5inManifest', 'CurrentMD5', 'ErrorMessage', 'Notes']
    writer.writerow(header)
    for root, dirs, files in os.walk(dir_to_verify): # Walk through the accession folder
        for file in files:
            fname = str(file).lower()
            if ('manifest' in fname) and (fname.endswith('.txt')): # Identify the manifest file with two conditions
                manifest_file = os.path.join(root, file)
                with open(manifest_file, 'r') as manifest: # Open the manifest and read the tabulated data by column 
                    for line in manifest.readlines():
                        cols = line.split('\t')
                        full_filename = cols[0].strip()
                        file_str = str(full_filename) #Convert filenames from repr to str for easier matching in the next step
                        filename = file_str.replace('"', '') #Remove quotations that are around some of the file paths   
                        md5 = cols[7].strip()
                        hash_dict[filename] = md5 # Add filename:checksum pairs to a dictionary
                        continue
    #For all other files in the directory, generate MD5 checksums and compare with the saved checksum in the dictionary.
    for root, dirs, files in os.walk(dir_to_verify): # Walk through the accession folder
        for file in files:
            fname = str(file).lower()
            if any(x in fname for x in to_skip): # Skip over preservation documentation
                pass
            else:   
                timestamp = datetime.now().strftime("%Y-%m-%d, %H:%M:%S")
                filepath = os.path.join(root, file)
                file_to_check = str(filepath)
                files_in_dir.append(file_to_check)
                if len(file_to_check) > 250:
                    file_to_check = (f'\\\\?\\{file_to_check}') # Adds extended-length path prefix to prevent Windows OSErrors from file paths longer than 260 chars
                with open(file_to_check, 'rb') as f: # Open the file in readable binary format so it can be funneled to the hashlib MD5 algorithm   
                    data = f.read()
                    md5 = hashlib.md5(data).hexdigest() # Pipe the binary file data to the checksum generator, "hexdigest" returns a typical MD5 string of hexadecimal digits
                    md5_generated = md5.upper()
                    if file_to_check.startswith('\\\\?\\'): # Removes extended-length path prefix for matching purposes
                        file_to_check = str(file_to_check[4:])
                    orig_md5 = hash_dict.get(file_to_check, None) # Get the original checksum from the dictionary
                    if md5_generated == orig_md5: # Checks if the new MD5 exactly matches the MD5 from the manifest
                        data = [timestamp, file_to_check, "TRUE", orig_md5, md5_generated] # Add it to the log
                        writer.writerow(data)
                    else:
                        if orig_md5 == None: # Indicates that the file is missing from the manifest altogether
                            data = [timestamp, file_to_check, "FALSE", None, md5_generated, "Missing from manifest"] # Add it to the log
                            writer.writerow(data)
                            count+=1 
                            print(f'\n\t{count}) IN DIRECTORY BUT MISSING FROM MANIFEST: {file_to_check}')
                        else: # This means the checksums don't match
                            data = [timestamp, file_to_check, "FALSE", orig_md5, md5_generated, "Checksums do not match"] # Add it to the log
                            writer.writerow(data)
                            count+=1 
                            print(f'\n\t{count}) INVALID CHECKSUM: {file_to_check}')
                        invalid.append(file_to_check) # Add the file name to the list

    hash_dict.pop('Full Name (Path+File)') # Remove key:value pair generated by manifest header

    for key in hash_dict: # Iterate through dict with manifest file list and identify if there's anything in there that's missing from the directory
        if key in files_in_dir:
            continue
        else:
            count+=1
            orig_md5 = hash_dict.get(key, 'NO MD5 FOUND IN MANIFEST') # Get the original MD5 from the manifest to print to the log
            data = [timestamp, key, "FALSE", orig_md5, None, f'Missing from specified directory: {dir_to_verify}'] # Add it to the log
            writer.writerow(data)
            print(f'\n\t{count}) IN MANIFEST BUT MISSING FROM DIRECTORY: {key}')

if not invalid: #If there is nothing in the error list, this will return "FALSE" and a "No errors" message will display in the terminal
    print('\nALL FILES HAVE BEEN VALIDATED. THERE ARE NO ERRORS.')

print(f'\nScript is finished. See validation log in accession folder.') # Indicates that the script is done and reminds the user where the log has been stored
